generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String    @unique
    emailVerified   DateTime?
    image           String?
    discordId       String?
    discordUsername String?
    secondaryEmail  String?
    accounts        Account[]
    sessions        Session[]
    team            Team?     @relation(fields: [teamId], references: [id], name: "member")
    teamId          String?
    ownerTeam       Team?     @relation(name: "owner")
    ownerTeamId     String?
}

model Team {
    id   String @id @default(cuid())
    name String

    users   User[] @relation(name: "member")
    owner   User   @relation(fields: [ownerId], references: [id], name: "owner", onDelete: Cascade)
    ownerId String @unique

    inviteToken String @unique
}

model Challenge {
    id          String @id @default(cuid())
    name        String
    description String
    category    String
    points      Int?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
