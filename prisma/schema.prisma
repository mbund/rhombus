datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Session {
    id      String   @id @default(cuid())
    expires DateTime
    userId  String
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Email {
    id       String    @id @default(cuid())
    email    String    @unique
    verified DateTime?
    User     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
}

model Discord {
    id             String @unique
    username       String
    globalUsername String
    image          String
    email          String
    user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String @unique
}

model User {
    id                 String          @id @default(cuid())
    discord            Discord?
    emails             Email[]
    sessions           Session[]
    columns            UserColumns[]
    userChallenges     UserChallenge[]
    ips                IP[]
    team               Team?           @relation(fields: [teamId], references: [id], name: "member")
    teamId             String?
    ownerTeam          Team?           @relation(name: "owner")
    ownerTeamId        String?
    authoredChallenges Challenge[]
    isAdmin            Boolean         @default(false)
    tickets            Ticket[]
    solves             Solve[]
    writeups           Writeup[]
}

model Writeup {
    id          String    @id @default(cuid())
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    challenge   Challenge @relation(fields: [challengeId], references: [id])
    challengeId String
    link        String
}

model Solve {
    id          String    @id @default(cuid())
    challengeId String
    challenge   Challenge @relation(fields: [challengeId], references: [id])
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    time        DateTime  @default(now())
    team        Team      @relation(fields: [teamId], references: [id])
    teamId      String
}

model UserColumns {
    id         String          @id @default(cuid())
    order      Int
    category   Category        @relation(fields: [categoryId], references: [id])
    categoryId String
    challenges UserChallenge[]
    user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
}

model UserChallenge {
    id          String      @id @default(cuid())
    order       Int
    challengeId String
    column      UserColumns @relation(fields: [columnId], references: [id], onDelete: Cascade)
    columnId    String
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
}

model Team {
    id          String     @id @default(cuid())
    name        String
    users       User[]     @relation(name: "member")
    owner       User       @relation(fields: [ownerId], references: [id], name: "owner", onDelete: Cascade)
    ownerId     String     @unique
    inviteToken String     @unique
    divisions   Division[]
    solves      Solve[]
}

model Division {
    id         String  @id @default(cuid())
    name       String
    info       String
    emailRegex String
    isDefault  Boolean @default(false)
    teams      Team[]
}

model Category {
    id          String        @id @default(cuid())
    name        String
    color       String
    Challenge   Challenge[]
    UserColumns UserColumns[]
}

model Challenge {
    id             String           @id @default(cuid())
    slug           String           @unique
    name           String
    description    String           @db.Text
    category       Category         @relation(fields: [categoryId], references: [id])
    categoryId     String
    difficulty     String
    flag           String
    ticketTemplate String
    points         Int?
    author         User             @relation(fields: [authorId], references: [id])
    authorId       String
    solves         Solve[]
    health         ChallengeHealth?
    writeups       Writeup[]
}

model ChallengeHealth {
    id          String    @id @default(cuid())
    challenge   Challenge @relation(fields: [challengeId], references: [id])
    challengeId String    @unique
    script      String    @db.Text
    healthy     Boolean   @default(false)
    lastChecked DateTime  @default(now())
}

model EmailVerificationToken {
    token   String   @id @unique @default(cuid())
    email   String
    expires DateTime
}

model IP {
    address String @id @unique
    users   User[]
}

model DiscordBot {
    id               String  @id @default(cuid())
    guildId          String
    ticketNumber     Int     @default(1)
    supportChannelId String?
    verifiedRoleId   String?
    authorRoleId     String?
    adminRoleId      String?
}

model Ticket {
    id      String @id @default(cuid())
    number  Int
    user    User   @relation(fields: [userId], references: [id])
    userId  String
    content String
}
