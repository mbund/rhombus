datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Session {
    id      String   @id @default(cuid())
    expires DateTime
    userId  String
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Email {
    id       String    @id @default(cuid())
    email    String    @unique
    verified DateTime?
    User     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
}

model Discord {
    id             String @unique
    username       String
    globalUsername String
    image          String
    email          String
    user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String @unique
}

model User {
    id                 String          @id @default(cuid())
    discord            Discord?
    emails             Email[]
    sessions           Session[]
    columns            UserColumns[]
    userChallenges     UserChallenge[]
    ips                IP[]
    team               Team?           @relation(fields: [teamId], references: [id], name: "member")
    teamId             String?
    ownerTeam          Team?           @relation(name: "owner")
    ownerTeamId        String?
    authoredChallenges Challenge[]
    isAdmin            Boolean         @default(false)
    tickets            Ticket[]
    solves             Solve[]
}

model Solve {
    id          String    @id @default(cuid())
    challengeId String
    challenge   Challenge @relation(fields: [challengeId], references: [id])
    userId      String?
    user        User?     @relation(fields: [userId], references: [id])
    time        DateTime  @default(now())
}

model UserColumns {
    id         String          @id @default(cuid())
    order      Int
    name       String
    challenges UserChallenge[]
    user       User            @relation(fields: [userId], references: [id])
    userId     String
}

model UserChallenge {
    id          String      @id @default(cuid())
    order       Int
    challengeId String
    column      UserColumns @relation(fields: [columnId], references: [id])
    columnId    String
    user        User        @relation(fields: [userId], references: [id])
    userId      String
}

model Team {
    id            String @id @default(cuid())
    name          String
    discordRoleId String

    users   User[] @relation(name: "member")
    owner   User   @relation(fields: [ownerId], references: [id], name: "owner", onDelete: Cascade)
    ownerId String @unique

    inviteToken String @unique
}

model Challenge {
    id            String  @id @default(cuid())
    humanId       String  @unique
    name          String
    description   String
    category      String
    difficulty    String
    flag          String
    issueTemplate String?
    points        Int?
    author        User    @relation(fields: [authorId], references: [id])
    authorId      String
    solves        Solve[]
}

model EmailVerificationToken {
    token   String   @id @unique @default(cuid())
    email   String
    expires DateTime
}

model IP {
    address String @id @unique
    users   User[]
}

model DiscordBot {
    id               String  @id @default(cuid())
    guildId          String
    ticketNumber     Int     @default(1)
    supportChannelId String?
    verifiedRoleId   String?
}

model Ticket {
    id      String @id @default(cuid())
    number  Int
    user    User   @relation(fields: [userId], references: [id])
    userId  String
    content String
}
